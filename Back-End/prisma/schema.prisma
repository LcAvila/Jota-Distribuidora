generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Models alinhados ao SQL (tabelas snake_case)

model Store {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  timezone  String   @default("America/Sao_Paulo")
  createdAt DateTime @default(now()) @map("created_at")

  users  User[]
  orders Order[]

  @@map("stores")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  lastName  String?
  profilePicture String?
  email     String   @unique
  password  String
  role      String
  storeId   Int      @map("store_id")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  store        Store      @relation(fields: [storeId], references: [id])
  // relacionamentos com orders
  clientOrders Order[]    @relation("client_relation")
  sellerOrders Order[]    @relation("seller_relation")
  logs         OrderLog[] @relation("user_logs_relation")

  @@map("users")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]

  @@map("categories")
}

model Product {
  id         Int      @id @default(autoincrement())
  sku        String   @unique
  code       String   @unique @default(cuid())
  name       String
  price      Decimal  @db.Decimal(10, 2)
  cost       Decimal  @db.Decimal(10, 2)
  stock      Int      @default(0)
  imageUrl   String?  @map("image_url")
  categoryId Int?     @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  // Campos adicionados pelo patch SQL 2025-08-10
  barcode    String?
  minStock   Int?     @map("min_stock")
  unit       String?
  active     Boolean  @default(true)

  category   Category?       @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  stockMoves StockMovement[]

  @@map("products")
}

model Order {
  id        Int      @id @default(autoincrement())
  clientId  Int      @map("client_id")
  sellerId  Int      @map("seller_id")
  storeId   Int      @map("store_id")
  total     Decimal  @db.Decimal(12, 2)
  status    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  client User  @relation("client_relation", fields: [clientId], references: [id])
  seller User  @relation("seller_relation", fields: [sellerId], references: [id])
  store  Store @relation(fields: [storeId], references: [id])

  items OrderItem[]
  logs          OrderLog[]
  orderPayments OrderPayment[]

  @@index([status], name: "idx_orders_status")
  @@index([storeId], name: "idx_orders_store")
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  qty       Int
  unitPrice Decimal @map("unit_price") @db.Decimal(10, 2)
  note      String?
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderLog {
  id         Int      @id @default(autoincrement())
  orderId    Int      @map("order_id")
  action     String
  byUserId   Int      @map("by_user_id")
  fromStatus String?  @map("from_status")
  toStatus   String?  @map("to_status")
  timestamp  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  order  Order @relation(fields: [orderId], references: [id])
  byUser User  @relation("user_logs_relation", fields: [byUserId], references: [id])

  @@map("order_logs")
}

model PaymentMethod {
  id     Int     @id @default(autoincrement())
  name   String  @unique // "Pix", "Cartão de Crédito", "Dinheiro"
  active Boolean @default(true)

  orderPayments OrderPayment[]

  @@map("payment_methods")
}

model OrderPayment {
  id              Int      @id @default(autoincrement())
  orderId         Int      @map("order_id")
  paymentMethodId Int      @map("payment_method_id")
  amount          Decimal  @db.Decimal(12, 2)
  paidAt          DateTime @default(now()) @map("paid_at")

  order         Order         @relation(fields: [orderId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@map("order_payments")
}

model Notification {
  id        Int       @id @default(autoincrement())
  type      String
  payload   Json?
  sentAt    DateTime? @map("sent_at")
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("notifications")
}

model StockMovement {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")
  qty         Int
  type        String
  referenceId Int?     @map("reference_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  referenceType ReferenceType? @map("reference_type")

  product Product @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

// Enum para reference_type conforme patch SQL
enum ReferenceType {
  order
  manual
  adjustment
}
